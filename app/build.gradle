plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace 'com.prudhvir3ddy.portfolio'
    signingConfigs {
        release {
            storeFile file(
                    './../keystore'
            )
            storePassword 'toooor'
            keyPassword 'toooor'
            keyAlias 'key0'
        }
    }
    compileSdk 35

    defaultConfig {
        applicationId "com.prudhvir3ddy.portfolio"
        minSdkVersion 23
        targetSdk 35
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    compileOptions {
        sourceCompatibility = 17
        targetCompatibility = 17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    flavorDimensions += "experience"
    productFlavors {
        instant {
            versionCode 10
        }
        installed {
            versionCode 1000
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout

    implementation libs.play.services.instantapps

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}

project.afterEvaluate {
  ext.getSigningConfig = { variant ->
    return variant.signingConfig ?: variant.buildType.signingConfig
  }
  Properties properties = new Properties()
  properties.load(project.rootProject.file('local.properties').newDataInputStream())
  def bundletool = "./bundletool-all-1.0.0.jar"

  android.applicationVariants.configureEach { variant ->
    task "assembleSplits${variant.name.capitalize()}"(type: Exec, dependsOn: "bundle",
        group: "build") {
      //1
      workingDir project.rootDir
      //2
      commandLine = ["java",
          "-jar", bundletool, "build-apks",
          "--bundle=${project.buildDir}/outputs/bundle/${variant.name}/app-instant-release.aab",
          "--output=${project.buildDir}/outputs/splits/${variant.name}/app.apks",
          "--connected-device",
          "--ks=${getSigningConfig()?.storeFile}",
          "--ks-pass=pass:${getSigningConfig()?.storePassword}",
          "--ks-key-alias=${getSigningConfig()?.keyAlias}",
          "--key-pass=pass:${getSigningConfig()?.keyPassword}",
          "--adb=${android.getAdbExe()}"
      ]
      doFirst {
        mkdir "${project.buildDir}/outputs/splits/${variant.name}"
        println "Running bundletool:\n${commandLine.join(" ")}"
      }
      doFirst {
        delete "${project.buildDir}/outputs/splits/${variant.name}"
      }
      doLast {
        println "Creating splits for ${variant.name}"
      }
    }
    task "runinstant${variant.name.capitalize()}"(type: ExecInstantApp,
        dependsOn: "assembleSplits${variant.name.capitalize()}", group: "build") {
      workingDir project.rootDir
      androidSdkPath = android.sdkDirectory.path
      apksPath = "${project.buildDir}/outputs/splits/${variant.name}/app.apks"
    }
  }
}

class ExecInstantApp extends Exec {
    //1
    @Input
    //2
    @Option(option = "androidSdk", description = "Android SDK path")
    //3
    String androidSdkPath

    @Input
    @Option(option = "apksPath", description = "App apk splits path")
    //4
    String apksPath

    @Input
    //5
    @Optional
    @Option(option = "url", description = "Url to launch Instant App")
    //6
    String url

    @Override
    protected void exec() {
        if (url != null) {
            commandLine = [
                    "${androidSdkPath}/extras/google/instantapps/ia",
                    "--debug", "run", apksPath, "-u", url
            ]
        } else {
            commandLine = [
                    "${androidSdkPath}/extras/google/instantapps/ia", "--debug", "run", apksPath
            ]
        }

        println "Running ia:\n${commandLine.join(" ")}"

        super.exec()
    }
}

